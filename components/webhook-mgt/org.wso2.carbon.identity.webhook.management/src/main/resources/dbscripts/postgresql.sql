-- Create the IDN_WEBHOOKS table if it does not exist
CREATE TABLE IF NOT EXISTS IDN_WEBHOOKS (
    ID SERIAL PRIMARY KEY,
    UUID VARCHAR(36) NOT NULL UNIQUE,
    ENDPOINT VARCHAR(2048) NOT NULL,
    DESCRIPTION VARCHAR(1024),
    SECRET VARCHAR(1024) NOT NULL,
    VERSION VARCHAR(32) NOT NULL,
    EVENT_SCHEMA_NAME VARCHAR(64) NOT NULL,
    EVENT_SCHEMA_URI VARCHAR(255) NOT NULL,
    EVENT_SCHEMA_VERSION VARCHAR(32) NOT NULL,
    STATUS VARCHAR(16) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT UQ_IDN_WEBHOOKS_UUID UNIQUE (UUID),
    CONSTRAINT UQ_IDN_WEBHOOKS_TENANT_ENDPOINT UNIQUE (TENANT_ID, ENDPOINT)
    );

-- Create the IDN_WEBHOOK_EVENTS table if it does not exist
CREATE TABLE IF NOT EXISTS IDN_WEBHOOK_EVENTS (
    ID SERIAL PRIMARY KEY,
    WEBHOOK_ID INTEGER NOT NULL,
    EVENT_NAME VARCHAR(255) NOT NULL,
    CONSTRAINT UQ_IDN_WEBHOOK_EVENTS_WEBHOOK_ID_EVENT_NAME (WEBHOOK_ID, EVENT_NAME),
    CONSTRAINT FK_IDN_WEBHOOK_EVENTS_WEBHOOKS
    FOREIGN KEY (WEBHOOK_ID)
    REFERENCES IDN_WEBHOOKS(ID)
    ON DELETE CASCADE
    );

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS IDX_IDN_WEBHOOK_UUID_TENANT ON IDN_WEBHOOK(UUID, TENANT_ID);
CREATE INDEX IF NOT EXISTS IDX_IDN_WEBHOOK_EVENTS_WEBHOOK_ID ON IDN_WEBHOOK_EVENTS(WEBHOOK_ID);

-- Create a trigger function to update the UPDATED_AT column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.UPDATED_AT = CURRENT_TIMESTAMP;
RETURN NEW;
END;

-- Create the trigger for the UPDATED_AT column
DROP TRIGGER IF EXISTS TRG_IDN_WEBHOOKS_UPDATED_AT ON IDN_WEBHOOKS;

CREATE TRIGGER TRG_IDN_WEBHOOKS_UPDATED_AT
    BEFORE UPDATE ON IDN_WEBHOOKS
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
