IF NOT EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[IDN_WEBHOOKS]') AND TYPE IN (N'U'))
CREATE TABLE IDN_WEBHOOKS (
  ID INTEGER IDENTITY(1,1),
  UUID NVARCHAR(36),
  ENDPOINT NVARCHAR(2048) NOT NULL,
  DESCRIPTION NVARCHAR(1024),
  SECRET NVARCHAR(1024) NOT NULL,
  VERSION NVARCHAR(32) NOT NULL,
  EVENT_SCHEMA_NAME NVARCHAR(64) NOT NULL,
  EVENT_SCHEMA_URI NVARCHAR(255) NOT NULL,
  EVENT_SCHEMA_VERSION NVARCHAR(32) NOT NULL,
  STATUS NVARCHAR(16) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  CREATED_AT DATETIME2 DEFAULT GETDATE(),
  UPDATED_AT DATETIME2 DEFAULT GETDATE()
  PRIMARY KEY (ID),
  UNIQUE (UUID),
  UNIQUE (TENANT_ID, ENDPOINT)
);

IF NOT EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[IDN_WEBHOOK_EVENTS]') AND TYPE IN (N'U'))
CREATE TABLE IDN_WEBHOOK_EVENTS (
  ID INTEGER IDENTITY(1,1),
  WEBHOOK_ID INTEGER NOT NULL,
  EVENT_NAME NVARCHAR(255) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE(WEBHOOK_ID, EVENT_NAME),
  CONSTRAINT FK_IDN_WEBHOOK_EVENTS_WEBHOOKS FOREIGN KEY (WEBHOOK_ID) REFERENCES IDN_WEBHOOKS(ID) ON DELETE CASCADE
);

CREATE INDEX IDX_IDN_WEBHOOK_UUID_TENANT ON IDN_WEBHOOKS(UUID, TENANT_ID);
CREATE INDEX IDX_IDN_WEBHOOK_EVENTS_WEBHOOK_ID ON IDN_WEBHOOK_EVENTS(WEBHOOK_ID);

GO

CREATE TRIGGER TRG_IDN_WEBHOOKS_UPDATED_AT
ON IDN_WEBHOOKS
AFTER UPDATE
AS
BEGIN
  UPDATE IDN_WEBHOOKS
  SET UPDATED_AT = GETDATE()
  FROM IDN_WEBHOOKS
  INNER JOIN INSERTED ON IDN_WEBHOOKS.ID = INSERTED.ID;
END;
GO
