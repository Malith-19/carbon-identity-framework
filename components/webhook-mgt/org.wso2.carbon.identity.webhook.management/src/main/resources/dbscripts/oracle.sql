-- Create the IDN_WEBHOOKS table
CREATE TABLE IDN_WEBHOOKS (
    ID INTEGER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    UUID VARCHAR2(36) NOT NULL,
    ENDPOINT VARCHAR2(2048) NOT NULL,
    DESCRIPTION VARCHAR2(1024),
    SECRET VARCHAR2(1024) NOT NULL,
    VERSION VARCHAR2(32) NOT NULL,
    EVENT_SCHEMA_NAME VARCHAR2(64) NOT NULL,
    EVENT_SCHEMA_URI VARCHAR2(255) NOT NULL,
    EVENT_SCHEMA_VERSION VARCHAR2(32) NOT NULL,
    STATUS VARCHAR2(16) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT UQ_IDN_WEBHOOKS_UUID UNIQUE (UUID),
    CONSTRAINT UQ_IDN_WEBHOOKS_TENANT_ENDPOINT UNIQUE (TENANT_ID, ENDPOINT)
);

-- Create the IDN_WEBHOOK_EVENTS table
CREATE TABLE IDN_WEBHOOK_EVENTS (
    ID INTEGER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    WEBHOOK_ID INTEGER NOT NULL,
    EVENT_NAME VARCHAR2(255) NOT NULL,
    CONSTRAINT UQ_IDN_WEBHOOK_EVENTS_WEBHOOK_ID_EVENT_NAME UNIQUE (WEBHOOK_ID, EVENT_NAME),
    CONSTRAINT FK_IDN_WEBHOOK_EVENTS_WEBHOOKS
    FOREIGN KEY (WEBHOOK_ID)
    REFERENCES IDN_WEBHOOKS(ID)
    ON DELETE CASCADE
);

CREATE INDEX IDX_IDN_WEBHOOK_UUID_TENANT ON IDN_WEBHOOKS(UUID, TENANT_ID);
CREATE INDEX IDX_IDN_WEBHOOK_EVENTS_WEBHOOK_ID ON IDN_WEBHOOK_EVENTS(WEBHOOK_ID);

-- Create a trigger for updating the UPDATED_AT column
CREATE OR REPLACE TRIGGER TRG_IDN_WEBHOOKS_UPDATED_AT 
BEFORE UPDATE ON IDN_WEBHOOKS
                  FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Ensure the trigger is enabled
ALTER TRIGGER TRG_IDN_WEBHOOKS_UPDATED_AT ENABLE;
